generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String                   @id @default(cuid())
  name            String?
  email           String?                  @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  country         String?
  birthYear       Int?
  sexGender       String?
  consentFlags    String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  accounts        Account[]
  achievements    Achievement[]
  assessments     Assessment[]
  chatMessages    ChatMessage[]
  checkIns        CheckIn[]
  coachSettings   CoachSettings?
  dailySnapshots  DailyProgressSnapshot[]
  dailyTasks      DailyTask[]
  events          Event[]
  goals           Goal[]
  journalEntries  JournalEntry[]
  purchases       Purchase[]
  sessions        Session[]
  subscriptions   Subscription[]
  progressStats   UserProgressStats?
  weeklySnapshots WeeklyProgressSnapshot[]
  weeklyTasks     WeeklyTask[]
}

model Assessment {
  id             String         @id @default(cuid())
  userId         String?
  anonId         String?
  version        String         @default("1.0")
  cohortAge      String
  cohortSex      String
  cohortRegion   String
  status         String         @default("in_progress")
  startedAt      DateTime       @default(now())
  completedAt    DateTime?
  completionTime Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  answers        Answer[]
  user           User?          @relation(fields: [userId], references: [id])
  purchases      Purchase[]
  scoreCategory  ScoreCategory?
  scoreOverall   ScoreOverall?
  shareTokens    ShareToken[]
  weeklyTasks    WeeklyTask[]
}

model Answer {
  id           String     @id @default(cuid())
  assessmentId String
  questionId   String
  valueRaw     String
  valueNorm    Float?
  createdAt    DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, questionId])
}

model ScoreCategory {
  id            String     @id @default(cuid())
  assessmentId  String     @unique
  financial     Float
  healthFitness Float
  social        Float
  romantic      Float
  assessment    Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
}

model ScoreOverall {
  id                  String     @id @default(cuid())
  assessmentId        String     @unique
  overall             Float
  percentileOverall   Float
  percentileFinancial Float
  percentileHealth    Float
  percentileSocial    Float
  percentileRomantic  Float
  assessment          Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
}

model CohortStats {
  id        String   @id @default(cuid())
  cohortKey String   @unique
  category  String
  mean      Float
  stddev    Float
  p1        Float
  p99       Float
  n         Int
  updatedAt DateTime @updatedAt
}

model Purchase {
  id           String     @id @default(cuid())
  userId       String
  assessmentId String
  product      String
  price        Float
  currency     String
  status       String
  stripeId     String?
  createdAt    DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String
  product   String
  status    String
  periodEnd DateTime
  cancelAt  DateTime?
  stripeId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model ShareToken {
  id           String     @id @default(cuid())
  assessmentId String
  token        String     @unique
  expiresAt    DateTime
  createdAt    DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
}

model Event {
  id        String   @id @default(cuid())
  userId    String?
  anonId    String?
  name      String
  props     String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CoachSettings {
  id               String    @id @default(cuid())
  userId           String    @unique
  primaryFocus     String    @default("financial")
  coachingStyle    String    @default("supportive")
  goalFrequency    String    @default("daily")
  dailyReminders   Boolean   @default(true)
  checkInFrequency String    @default("daily")
  checkInTime      String    @default("09:00")
  checkInDays      String?
  nextCheckIn      DateTime?
  lastCheckIn      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyTask {
  id               String    @id @default(cuid())
  userId           String
  title            String
  description      String?
  category         String
  source           String    @default("user")
  priority         String?
  estimatedMinutes Int?
  completed        Boolean   @default(false)
  completedAt      DateTime?
  date             DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title, date])
}

model WeeklyTask {
  id               String      @id @default(cuid())
  userId           String
  assessmentId     String?
  title            String
  description      String?
  category         String
  source           String      @default("user")
  priority         String?
  estimatedMinutes Int?
  week             Int
  completed        Boolean     @default(false)
  completedAt      DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  assessment       Assessment? @relation(fields: [assessmentId], references: [id])
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title, week, category])
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  entry     String
  question  String?
  mood      String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProgressStats {
  id                    String    @id @default(cuid())
  userId                String    @unique
  currentStreak         Int       @default(0)
  longestStreak         Int       @default(0)
  lastActiveDate        DateTime?
  totalTasksCompleted   Int       @default(0)
  totalTasksAssigned    Int       @default(0)
  completionRate        Float     @default(0.0)
  weeklyCompletionRate  Float     @default(0.0)
  monthlyCompletionRate Float     @default(0.0)
  lastCalculated        DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyProgressSnapshot {
  id             String   @id @default(cuid())
  userId         String
  date           DateTime
  tasksCompleted Int      @default(0)
  tasksTotal     Int      @default(0)
  journalEntries Int      @default(0)
  completionRate Float    @default(0.0)
  streakDay      Int      @default(0)
  hasActivity    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model WeeklyProgressSnapshot {
  id                   String   @id @default(cuid())
  userId               String
  weekStart            DateTime
  weekEnd              DateTime
  weekNumber           Int
  year                 Int
  dailyTasksCompleted  Int      @default(0)
  dailyTasksTotal      Int      @default(0)
  weeklyTasksCompleted Int      @default(0)
  weeklyTasksTotal     Int      @default(0)
  journalEntries       Int      @default(0)
  completionRate       Float    @default(0.0)
  daysActive           Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, weekNumber])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  description String
  icon        String
  category    String?
  level       String   @default("bronze")
  metadata    String?
  earnedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, title])
}

model CheckIn {
  id           String    @id @default(cuid())
  userId       String
  type         String
  status       String    @default("pending")
  scheduledFor DateTime
  completedAt  DateTime?
  mood         String?
  energy       Int?
  notes        String?
  responses    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, scheduledFor])
}

model ChatMessage {
  id             String   @id @default(cuid())
  userId         String
  assessmentId   String?
  role           String
  content        String
  context        String?
  coaching_style String?
  response_time  Int?
  tokens_used    Int?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Goal {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  category    String
  target      String
  deadline    DateTime?
  status      String    @default("active")
  priority    String    @default("medium")
  progress    Float     @default(0.0)
  milestones  String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}
